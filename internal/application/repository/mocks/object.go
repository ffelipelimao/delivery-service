// Code generated by MockGen. DO NOT EDIT.
// Source: ./object.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/ffelipelimao/delivery-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockObjectRepository is a mock of ObjectRepository interface.
type MockObjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockObjectRepositoryMockRecorder
}

// MockObjectRepositoryMockRecorder is the mock recorder for MockObjectRepository.
type MockObjectRepositoryMockRecorder struct {
	mock *MockObjectRepository
}

// NewMockObjectRepository creates a new mock instance.
func NewMockObjectRepository(ctrl *gomock.Controller) *MockObjectRepository {
	mock := &MockObjectRepository{ctrl: ctrl}
	mock.recorder = &MockObjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectRepository) EXPECT() *MockObjectRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockObjectRepository) Insert(object domain.Object) (domain.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", object)
	ret0, _ := ret[0].(domain.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockObjectRepositoryMockRecorder) Insert(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockObjectRepository)(nil).Insert), object)
}
